 @using Microsoft.AspNetCore.Identity
@using Todo.Controllers
@using Todo.Data
@using Todo.Data.Entities
@using Todo.Services
@using Todo.Models.TodoItems
@using Todo.Views.TodoItem
@model Todo.Models.TodoLists.TodoListDetailViewmodel
@inject ApplicationDbContext dbContext

@{
    ViewData["Title"] = $"List: {Model.Title}";
}

<h2>@ViewData["Title"]</h2>

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "__AjaxAntiForgeryForm" }))
{
    @Html.AntiForgeryToken()
}

<div>
    <div class="col-md-6">
        <div class="form-group">

            <div class="checkbox">
                <label>
                    <input type="checkbox" id="hideDoneCheckbox" />Hide completed
                </label>
            </div>
            <a id="sortByRank" style="font-weight:bold">
                Sort by rank
            </a>
            <br/>
            <a id="sortByImportance">
                Sort by importance
            </a>
        </div>
        <ul class="list-group">
            @* If changing the sorting, update the javascript in the <script> block to represent what the default sort is on page load *@
            @foreach (var item in Model.Items.OrderBy(m => m.Rank))
            {
                string contextualClass;
                switch (item.Importance)
                {
                    case Importance.High:
                        contextualClass = "list-group-item-danger";
                        break;
                    case Importance.Low:
                        contextualClass = "list-group-item-info";
                        break;
                    default:
                        contextualClass = "";
                        break;
                }
                string rowName = "outstanding";
                @if (item.IsDone)
                {
                    rowName = "isdone";
                }

                @* data-importance and data-rank are used to store item properties for sorting 
                    data-email is used to lookup display name from gravatar asynchronously
                *@
                <li class="list-group-item @contextualClass" name=@rowName data-importance="@item.Importance" data-rank="@item.Rank" data-email="@item.ResponsibleParty.Email" data-itemId="@item.TodoItemId">

                    <div class="row">
                        <div class="col-md-8">
                            <a asp-action="Edit" asp-controller="TodoItem" asp-route-todoItemId="@item.TodoItemId">

                                @if (item.IsDone)
                                {
                                    <s>@item.Title</s>
                                }
                                else
                                {
                                    <text>@item.Title</text>
                                }
                            </a>

                            <div class="form-group">
                                <label asp-for="@item.Rank"></label>
                                <input asp-for="@item.Rank" class="form-control" onchange="rankInputChanged(event)"/>
                                <span asp-validation-for="@item.Rank" class="text-danger"></span>
                            </div>
                        </div>

                        <div class="col-md-4 text-right">
                            <small>
                                @item.ResponsibleParty.UserName

                                <img src="https://www.gravatar.com/avatar/@Gravatar.GetHash(item.ResponsibleParty.Email)?s=30" />
                            </small>
                            <p>&nbsp;</p>
                        </div>
                    </div>

                </li>
            }
        </ul>
    </div>
    <div class="col-md-6">
        <div class="form-group">
            <label>Create item</label> 
            <div class="form-group">
                <label asp-for="Title"></label>
                <input class="form-control" id="createItemTitle"/>
                <span asp-validation-for="Title" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <button id="createButton" onclick="createItemClicked()">Create</button>
        </div>
</div>

<script src="~/lib/jquery/dist/jquery.js"></script>
<script>
    const hideDoneCheckbox = document.getElementById("hideDoneCheckbox")
    const sortByRank = document.getElementById("sortByRank")
    const sortByImportance = document.getElementById("sortByImportance")

    loadProfileNames();

    // Initial sort on page load is importance/ascending
    var sortedBy = "rank"
    var sortAscending = true;

    const collection = document.getElementsByName("isdone")

    hideDoneCheckbox.addEventListener('change', (event) => {
        let hidingCompletedItems = event.target.checked
        const setTo = hidingCompletedItems ? "none" : "block";
        for (let i = 0; i < collection.length; i++) {
            collection[i].style.display = setTo;
        }
    })

    sortByRank.addEventListener('click', (event) => {
        if (sortedBy == "rank") {
            sortAscending = !sortAscending;
        }
        else {
            sortedBy = "rank"
            sortAscending = true;
            emphasiseAnchor(sortByRank, true);
            emphasiseAnchor(sortByImportance, false);
        }
        sortItems(sortAscending, sortByRankComparitor);
    })

    sortByImportance.addEventListener('click', (event) => {
        if (sortedBy == "importance") {
            sortAscending = !sortAscending;
        }
        else {
            sortedBy = "importance"
            sortAscending = true;
            emphasiseAnchor(sortByRank, false);
            emphasiseAnchor(sortByImportance, true);
        }
        sortItems(sortAscending, sortByImportanceComparitor);
    })

    function loadProfileNames() {
        let emails = new Set();

        let ul = $(".list-group:first");

        $.each(ul.children("li"), function (_, element) {
            let emailAddr = element.getAttribute("data-email").toLowerCase();
            if (!emails.has(emailAddr)) {
                emails.add(emailAddr);
                setProfileName(emailAddr);
            }
        });
    }

    function setProfileName(emailAddressInLowerCase) {
        $.getJSON('@Url.Action("GetProfileName")', { "emailAddress":emailAddressInLowerCase }, function (profileName) {
            // Got an emailAddress -> profileName link. Iterate across all LI elements and update
            //  the profile name for any items that have the same email address
            let ul = $(".list-group:first");

            $.each(ul.children("li"), function (_, element) {
                let iteratingEmailAddr = element.getAttribute("data-email").toLowerCase();
                if (iteratingEmailAddr == emailAddressInLowerCase) {
                    let paragraphs = element.getElementsByTagName("p");
                    if (paragraphs != null && paragraphs.length > 0) {
                        pElement = paragraphs[0];
                        if (profileName == null || profileName == "") {
                            pElement.innerText = '\xa0';
                        }
                        else {
                            pElement.innerText = profileName;
                        }
                    }
                }
            });
        });
    }

    function resort() {
        let comparitor = sortByRankComparitor;
        if (sortedBy == "importance") {
            comparitor = sortByImportanceComparitor;
        }
        sortItems(sortAscending, comparitor);
    }

    function sortItems(ascending, comparitor)  {
        let ul = $(".list-group:first");
        let arr = $.makeArray(ul.children("li"));

        arr.sort(comparitor);
        if (!ascending) {
            arr.reverse();
        }

        ul.empty();

        $.each(arr, function () {
            ul.append(this);
        });
    }

    function sortByRankComparitor(elementA, elementB) {
        let rankAStr = elementA.getAttribute("data-rank");
        let rankBStr = elementB.getAttribute("data-rank");
        if (rankBStr == null) {
            // B is the 'add new item' at the top of the list, it should come before A
            return 1; 
        }
        else if (rankAStr == null) {
            // A is the 'add new item' at the top of the list, it should come before B
            return -1;
        }
        let rankA = +rankAStr;
        let rankB = +rankBStr;

        if (rankA < rankB) return -1; // A comes before B
        if (rankA > rankB) return 1; // B comes before A

        return 0;
    }

    function sortByImportanceComparitor(elementA, elementB) {
        let importanceStringA = elementA.getAttribute("data-importance");
        let importanceStringB = elementB.getAttribute("data-importance");
        if (importanceStringB == null) {
            // B is the 'add new item' at the top of the list, it should come before A
            return 1;
        }
        else if (importanceStringA == null) {
            // A is the 'add new item' at the top of the list, it should come before B
            return -1;
        }

        let importanceA = importanceToInteger(importanceStringA);
        let importanceB = importanceToInteger(importanceStringB);

        if (importanceA < importanceB) return -1;  // A comes before B
        if (importanceA > importanceB) return 1; //  B comes before A

        return 0;
    }

    function importanceToInteger(importanceStr) {
        switch (importanceStr) {
            case "High": return 1;
            case "Medium": return 2;
            case "Low": return 3;
            // This ensures items that do not have a data-importance attribute are sorted first in the list, such as the 'Add New Item' link.
            default: return 0;
        }
    }

    function createItemClicked() {
        let titleElement = document.getElementById("createItemTitle")
        if (titleElement == null || titleElement.value == null) {
            return
        }

        let titleText = titleElement.value.trim();
        if (titleText.length == 0) {
            return
        }
        let ul = $(".list-group:first");

        let [liElement, inputElement] = createNewListRow(titleText);
        ul.append(liElement);

        let paragraph = liElement.getElementsByTagName("p");
        let anchor = liElement.getElementsByTagName("a");
        let emailAddr = liElement.getAttribute("data-email");

        titleElement.value = "";

        if (paragraph != null && paragraph.length > 0) {
            setProfileName(emailAddr.toLowerCase());
        }
        createItemAsync(@Model.TodoListId, titleText, "@Model.OwnerId", anchor[0], liElement, inputElement);

        resort();
    }

    function createItemAsync(todoListId, title, responsiblePartyId, anchorElement, liElement, inputElement) {
        $.post('@Url.Action("CreateItem")', { "listId":todoListId, title, responsiblePartyId}, function (item) {
            anchorElement.setAttribute("href", "/TodoItem/Edit?todoItemId=" + item.todoItemId);
            // Used when moving an item up/down a rank - item ids used to swap the rank in the backend
            liElement.setAttribute("data-itemId", item.todoItemId);
            // Used for sorting by rank
            liElement.setAttribute("data-rank", item.rank);
            if (inputElement!=null) {
                inputElement.value = item.rank;
            }
            resort();
        });

        resort();
    }

    function createNewListRow(titleText) {
        let liElement = document.createElement("li");
        let divElement = document.createElement("div");
        let subDivElement1 = document.createElement("div");
        let anchorElement = document.createElement("a");
        let rankFormGroupElement = document.createElement("div");
        let rankLabelElement = document.createElement("label");
        let rankInput1Element = document.createElement("input");
        let rankInput2Element = document.createElement("input");
        let rankSpanElement = document.createElement("span");
        let subDivElement2 = document.createElement("div");
        let smallElement = document.createElement("small");
        let paragraphElement = document.createElement("p");
        let imageElement = document.createElement("img");
        let textElement = document.createElement("text");

        textElement.innerText = titleText;

        // Anchor element will need to have its href attribute set after this item is created in the database
        imageElement.setAttribute("src", "https://www.gravatar.com/avatar/@Gravatar.GetHash(@Model.OwnerEmail)?s=30");

        // During tests, a plus sign was causing issues inside an email address. Javascripts unescape is deprecated.
        let email = "@Model.OwnerEmail";
        let unescapedEmail = email.replace("&#x2B;", "+");
        smallElement.innerText = unescapedEmail;

        subDivElement1.setAttribute("class", "col-md-8");
        subDivElement2.setAttribute("class", "col-md-4 text-right");

        rankLabelElement.setAttribute("for", "item_rank");
        rankLabelElement.innerText = "Rank";
        rankInput1Element.setAttribute("class", "form-control");
        rankInput1Element.setAttribute("onchange", "rankInputChanged(event)");
        rankInput1Element.setAttribute("type", "number");
        rankInput1Element.setAttribute("id", "item_Rank");
        rankInput1Element.setAttribute("name", "item_Rank");
        rankInput2Element.setAttribute("name", "__Invariant");
        rankInput2Element.setAttribute("type", "hidden");
        rankInput2Element.setAttribute("value", "item.Rank");
        rankSpanElement.setAttribute("class", "text-danger field-attribution-valid");
        rankSpanElement.setAttribute("data-valmsg-for", "item.Rank");
        rankSpanElement.setAttribute("data-valmsg-replace", "true");

        rankFormGroupElement.setAttribute("class", "form-group");

        divElement.setAttribute("class", "row");

        liElement.setAttribute("class", "list-group-item");
        liElement.setAttribute("name", "outstanding");
        liElement.setAttribute("data-importance", "Medium");
        liElement.setAttribute("data-rank", "0");

        liElement.setAttribute("data-email", unescapedEmail);

        smallElement.append(imageElement);
        subDivElement2.append(smallElement);
        subDivElement2.append(paragraphElement);
        anchorElement.append(textElement);
        rankFormGroupElement.append(rankLabelElement);
        rankFormGroupElement.append(rankInput1Element);
        rankFormGroupElement.append(rankInput2Element);
        rankFormGroupElement.append(rankSpanElement);

        subDivElement1.append(anchorElement);
        subDivElement1.append(rankFormGroupElement);

        divElement.append(subDivElement1);
        divElement.append(subDivElement2);
        liElement.append(divElement);

        return [liElement, rankInput1Element];
    }

    function rankInputChanged(event) {
        let currentTarget = event.currentTarget;
        let updatedRank = parseInt(currentTarget.value,10);
        let containingListElement = currentTarget.parentElement.parentElement.parentElement.parentElement;
        if (containingListElement == null || containingListElement.tagName != 'LI') {
            return;
        }
        let itemId = containingListElement.getAttribute("data-itemId");
        if (itemId!=null) {
            updateItemRanksAsync(itemId, updatedRank);
        }
        containingListElement.setAttribute("data-rank", updatedRank);
        resort();
    }

    function updateItemRanksAsync(itemId, updatedRank) {
        var form = $('#__AjaxAntiForgeryForm');
        var token = $('input[name="__RequestVerificationToken"]', form).val();
        $.post({
            url: '@Url.Action("UpdateItemRank", "TodoItem")',
            type: 'POST',
            data: {
                __RequestVerificationToken: token,
                itemId: itemId,
                updatedRank: updatedRank
            }
        });
    }

    function emphasiseAnchor(anchorElement, emphasise) {
        if (emphasise) {
            anchorElement.setAttribute("style", "font-weight:bold");
        }
        else {
            anchorElement.setAttribute("style", "");
        }
    }

</script>